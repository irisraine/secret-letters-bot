import nextcord
from nextcord import Interaction
from nextcord.ext import commands, tasks
from dotenv import load_dotenv
import logging
import datetime
import os
import engine.sql as sql
import engine.config as config
import engine.messages as messages
import engine.utils as utils
from engine.messages import Letter

load_dotenv()
intents = nextcord.Intents.all()
client = commands.Bot(command_prefix='!', intents=intents)

event_settings = {}
launch_time = datetime.time(
    hour=config.SENDING_TARGET_TIME['hour'],
    minute=config.SENDING_TARGET_TIME['minute']
)
current_date = datetime.date.today()
sending_date = datetime.date(2024, 2, 14)
event_timestamp = 1
send_already_letters_count = 0
send_failure_recipients = set()


class LetterForm(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–¢–∞–π–Ω–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –≤ —Ç–µ–ø–ª—ã—Ö —á—É–≤—Å—Ç–≤–∞—Ö!")

        self.recipient_username = nextcord.ui.TextInput(
            label="–ê–¥—Ä–µ—Å–∞—Ç",
            min_length=3,
            max_length=100,
            required=True,
            placeholder="–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ Discord-–∏–º—è –∞–¥—Ä–µ—Å–∞—Ç–∞",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.recipient_username)
        self.sender_alias = nextcord.ui.TextInput(
            label="–ú–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º",
            max_length=100,
            required=False,
            placeholder="–¢–∞–π–Ω—ã–π –ø–æ–∫–ª–æ–Ω–Ω–∏–∫",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.sender_alias)
        self.body_content = nextcord.ui.TextInput(
            label="–¢–µ–∫—Å—Ç –ø–∏—Å—å–º–∞",
            max_length=4000,
            required=True,
            placeholder="–¢–µ–∫—Å—Ç –ø–æ—Å–ª–∞–Ω–∏—è, –ø–æ–ª–Ω—ã–π –∫–æ—à–∞—á—å–µ–≥–æ –º—É—Ä—á–∞–Ω–∏—è",
            style=nextcord.TextInputStyle.paragraph
        )
        self.add_item(self.body_content)
        self.image_url = nextcord.ui.TextInput(
            label="–û—Ç–∫—Ä—ã—Ç–∫–∞",
            max_length=200,
            required=False,
            placeholder="URL –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–∫—Ä—ã—Ç–∫–∏",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.image_url)

    async def callback(self, interaction: Interaction) -> None:
        await interaction.response.defer()
        recipient = nextcord.utils.get(interaction.guild.members, name=self.recipient_username.value)
        if not recipient:
            return await interaction.followup.send(
                embed=messages.recipient_error(self.recipient_username.value).embed, ephemeral=True
            )
        elif sql.is_letter_send_already(interaction.user.id, recipient.id):
            return await interaction.followup.send(
                embed=messages.send_already_error().embed, ephemeral=True
            )
        if recipient.id == interaction.user.id:
            return await interaction.followup.send(
                embed=messages.self_sending_error().embed, ephemeral=True
            )
        image_binary_data, image_filename = utils.image_download(self.image_url.value)
        if self.image_url.value and not image_binary_data:
            return await interaction.followup.send(
                embed=messages.attached_image_error().embed, ephemeral=True
            )
        sql.add_letter_db_record(
            recipient_discord_id=recipient.id,
            recipient_username=recipient.name,
            recipient_globalname=recipient.global_name,
            sender_discord_id=interaction.user.id,
            sender_username=interaction.user.name,
            sender_alias=self.sender_alias.value,
            body_content=self.body_content.value,
            image_binary_data=image_binary_data,
            image_filename=image_filename
        )
        sql.increment_count(interaction.user.id)
        logging.info(f'–ü–∏—Å—å–º–æ –¥–ª—è {recipient.name} —Å–æ–∑–¥–∞–Ω–æ')
        return await interaction.followup.send(
            embed=messages.send_success(recipient.name).embed, ephemeral=True
        )


class MainMenuButtons(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.current_event_timestamp = event_timestamp

    @nextcord.ui.button(label="–¢–∞–π–Ω–æ –ø—Ä–∏–∑–Ω–∞—Ç—å—Å—è", style=nextcord.ButtonStyle.blurple, emoji="üíå")
    async def create_letter_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        if current_date >= sending_date or self.current_event_timestamp != event_timestamp:
            return await interaction.response.send_message(
                embed=messages.expired_event().embed, ephemeral=True
            )
        count_by_current_user = sql.get_count(interaction.user.id)
        if not count_by_current_user:
            sql.set_count(interaction.user.id)
        elif count_by_current_user[0] > 24:
            return await interaction.response.send_message(
                embed=messages.max_count_error().embed, ephemeral=True
            )
        await interaction.response.send_modal(LetterForm())

    @nextcord.ui.button(label="–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º", style=nextcord.ButtonStyle.blurple, emoji="üìã")
    async def list_of_my_letters_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        if self.current_event_timestamp != event_timestamp:
            return await interaction.response.send_message(
                embed=messages.old_event().embed, ephemeral=True
            )
        letters_by_user_db_records = sql.get_letters_by_sender_db_records(interaction.user.id)
        options = []
        for letter_db_record in letters_by_user_db_records:
            record_id = letter_db_record[0]
            recipient_username = letter_db_record[2]
            letter_preview = letter_db_record[7] if len(letter_db_record[7]) < 50 else f"{letter_db_record[7][:45]}..."
            option = nextcord.SelectOption(
                label=f"–ü–∏—Å—å–º–æ –¥–ª—è {recipient_username}",
                value=record_id,
                description=letter_preview,
                emoji="üíò"
            )
            options.append(option)
        if not options:
            return await interaction.response.send_message(
                embed=messages.empty_list_error().embed, ephemeral=True
            )
        await interaction.response.send_message(
            view=LettersList(options), ephemeral=True
        )


class LettersListDropdown(nextcord.ui.Select):
    def __init__(self, options):
        super().__init__(
            placeholder="–°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º",
            options=options
        )

    async def callback(self, interaction: Interaction) -> None:
        letter_db_record = sql.get_letter_db_record(self.values[0])
        if not letter_db_record:
            return await interaction.response.send_message(
                embed=messages.not_exist_error().embed, ephemeral=True
            )
        letter_message = Letter(letter_db_record)
        await interaction.response.defer()
        await interaction.edit_original_message(
            embed=letter_message.embed,
            file=letter_message.image,
            view=DeleteLetterButton(letter_db_record[0])
        )


class LettersList(nextcord.ui.View):
    def __init__(self, options):
        super().__init__(timeout=None)
        self.add_item(LettersListDropdown(options=options))


class DeleteLetterButton(nextcord.ui.View):
    def __init__(self, record_id):
        super().__init__(timeout=None)
        self.record_id = record_id

    @nextcord.ui.button(label="–£–¥–∞–ª–∏—Ç—å –ø–∏—Å—å–º–æ", style=nextcord.ButtonStyle.red, emoji="üî™")
    async def delete_letter_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        sql.delete_letter_db_record(self.record_id)
        sql.decrement_count(interaction.user.id)
        await interaction.response.defer()
        await interaction.edit_original_message(
            embed=messages.deletion().embed,
            attachments=[],
            view=None
        )


class NewEventCreationForm(nextcord.ui.Modal):
    def __init__(self):
        super().__init__("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∏–≤–µ–Ω—Ç")

        self.event_title = nextcord.ui.TextInput(
            label="–ù–∞–∑–≤–∞–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
            min_length=3,
            max_length=50,
            required=True,
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.event_title)
        self.event_description = nextcord.ui.TextInput(
            label="–¢–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
            max_length=4000,
            required=True,
            style=nextcord.TextInputStyle.paragraph
        )
        self.add_item(self.event_description)
        self.event_sending_date = nextcord.ui.TextInput(
            label="–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º",
            required=True,
            placeholder="–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.event_sending_date)
        self.event_image_url = nextcord.ui.TextInput(
            label="URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏",
            max_length=200,
            required=True,
            placeholder="–í —Ñ–æ—Ä–º–∞—Ç–µ PNG –∏–ª–∏ JPG",
            style=nextcord.TextInputStyle.short
        )
        self.add_item(self.event_image_url)

    async def callback(self, interaction: Interaction) -> None:
        await interaction.response.defer()
        global event_settings
        event_sending_date = utils.get_parsed_date(self.event_sending_date.value)
        if not event_sending_date:
            return await interaction.followup.send(
                embed=messages.invalid_date_warning().embed, ephemeral=True
            )
        image_binary_data, _ = utils.image_download(self.event_image_url.value)
        if not image_binary_data:
            return await interaction.followup.send(
                embed=messages.attached_image_error().embed, ephemeral=True
            )
        event_settings = {
            "title": self.event_title.value,
            "description": self.event_description.value,
            "sending_date": event_sending_date,
            "event_timestamp": int(datetime.datetime.now().timestamp())
        }
        utils.save_event_settings(event_settings)
        utils.save_image_file(image_binary_data)
        apply_event_settings()
        global send_already_letters_count
        global send_failure_recipients
        global event_timestamp
        send_already_letters_count = 0
        send_failure_recipients = set()
        event_timestamp = event_settings['event_timestamp']
        return await interaction.followup.send(
            embed=messages.new_event_successful_created().embed, ephemeral=True
        )


class AdminMenuButtons(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    async def interaction_check(self, interaction: nextcord.Interaction):
        if interaction.user.guild_permissions.administrator:
            return True
        else:
            await interaction.response.send_message(
                embed=messages.admin_option_only_warning().embed, ephemeral=True)
            return False

    @nextcord.ui.button(label="–ù–æ–≤—ã–π –∏–≤–µ–Ω—Ç", style=nextcord.ButtonStyle.blurple, emoji="ü™Ñ")
    async def create_new_event_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_modal(NewEventCreationForm())

    @nextcord.ui.button(label="–†—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", style=nextcord.ButtonStyle.blurple, emoji="üì®")
    async def manual_send_letters_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        days_before_scheduled_start = (sending_date - current_date).days
        await interaction.followup.send(
            embed=messages.manual_sending_warning(days_before_scheduled_start).embed,
            view=StartManualSendLettersButton(),
            ephemeral=True
        )

    @nextcord.ui.button(label="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", style=nextcord.ButtonStyle.blurple, emoji="üìà")
    async def stats_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        all_letters_count = sql.count_letters()
        await interaction.followup.send(
            embed=messages.stats(
                all_letters_count,
                send_already_letters_count,
                sending_date,
                send_failure_recipients).embed,
            ephemeral=True
        )

    @nextcord.ui.button(label="–°—Ç–µ—Ä–µ—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", style=nextcord.ButtonStyle.blurple, emoji="üî•")
    async def drop_database_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.send_message(
            embed=messages.database_deletion_warning().embed,
            view=DropDatabaseButton(),
            ephemeral=True
        )


class DropDatabaseButton(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @nextcord.ui.button(label="–£–¥–∞–ª–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ", style=nextcord.ButtonStyle.red, emoji="üî™")
    async def drop_database_confirm_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        sql.drop_tables()
        logging.info('–í—Å–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–µ—Ä—Ç–∞')
        await interaction.edit_original_message(
            embed=messages.database_deletion().embed,
            view=None
        )


class StartManualSendLettersButton(nextcord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.manual_send_failed_letters_callback.disabled = not send_failure_recipients

    @nextcord.ui.button(label="–†–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ –ø–∏—Å—å–º–∞", style=nextcord.ButtonStyle.green, emoji="üì¨")
    async def manual_send_all_letters_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        logging.info('–†—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–∏—Å–µ–º –Ω–∞—á–∞—Ç–∞')
        await interaction.edit_original_message(
            embed=messages.manual_sending_start().embed,
            view=None
        )
        await send_letters()

    @nextcord.ui.button(label="–†–∞–∑–æ—Å–ª–∞—Ç—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞", style=nextcord.ButtonStyle.green, emoji="üìÆ")
    async def manual_send_failed_letters_callback(self, button: nextcord.ui.Button, interaction: nextcord.Interaction):
        await interaction.response.defer()
        logging.info('–†—É—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–∏—Å–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—á–∞—Ç–∞')
        await interaction.edit_original_message(
            embed=messages.manual_sending_start().embed,
            view=None
        )
        await send_letters(send_failure_recipients)


def apply_event_settings():
    global event_settings
    global sending_date
    event_settings = utils.load_event_settings()
    if not event_settings:
        logging.error('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª settings.json –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞!')
        return
    sending_date = datetime.date(
        day=event_settings['sending_date']['day'],
        month=event_settings['sending_date']['month'],
        year=event_settings['sending_date']['year']
    )


async def send_letters(custom_recipients=None):
    if custom_recipients:
        letters_db_records = []
        for custom_recipient in custom_recipients:
            recipient_letters_db_record = list(sql.get_letters_by_recipient_db_records(custom_recipient[0]))
            print(recipient_letters_db_record)
            letters_db_records.extend(recipient_letters_db_record)
    else:
        letters_db_records = sql.get_letters_db_records()
    global send_already_letters_count
    global send_failure_recipients
    send_already_letters_count = 0
    send_failure_recipients = set()
    for letter_db_record in letters_db_records:
        recipient_discord_id = letter_db_record[1]
        recipient_username = letter_db_record[2]
        try:
            recipient = client.get_user(recipient_discord_id)
            letter_message = Letter(letter_db_record)
            await recipient.send(
                embed=letter_message.embed,
                file=letter_message.image
            )
            send_already_letters_count += 1
            logging.info(f'–ü–∏—Å—å–º–æ –¥–ª—è {recipient_username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
        except nextcord.Forbidden:
            send_failure_recipients.add((recipient_discord_id, recipient_username))
            logging.error(f'–ü–∏—Å—å–º–æ –¥–ª—è {recipient_username} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, '
                          f'–ø–æ—Å–∫–æ–ª—å–∫—É –±–æ—Ç –Ω–µ –∏–º–µ–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ '
                          f'—Å–æ–æ–±—â–µ–Ω–∏–π —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        except nextcord.HTTPException as e:
            send_failure_recipients.add((recipient_discord_id, recipient_username))
            logging.error(f'–ü–∏—Å—å–º–æ –¥–ª—è {recipient_username} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, '
                          f'–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∞ HTTPException. '
                          f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e}')
        except Exception as e:
            send_failure_recipients.add((recipient_discord_id, recipient_username))
            logging.error(f'–ü–∏—Å—å–º–æ –¥–ª—è {recipient_username} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, '
                          f'–ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–±—â–∞—è –æ—à–∏–±–∫–∞. '
                          f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {e}')
    logging.info(f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {send_already_letters_count} –ø–∏—Å–µ–º.')


@client.event
async def on_ready():
    logging.info(f'–ë–æ—Ç –∑–∞–ª–æ–≥–∏–Ω–µ–Ω –ø–æ–¥ –∏–º–µ–Ω–µ–º: {client.user.name}')
    if not os.path.exists('database'):
        os.makedirs('database')
    apply_event_settings()
    sql.create_tables()
    scheduled_send_letters.start()


@client.command()
@commands.has_permissions(administrator=True)
async def start_secret_letters(ctx):
    introduction = messages.introduction(
        event_settings['title'],
        event_settings['description']
    )
    await ctx.send(
        embeds=[introduction.embed, messages.instruction().embed],
        files=[introduction.image, messages.instruction().image],
        view=MainMenuButtons()
    )


@client.command()
@commands.has_permissions(administrator=True)
async def admin_secret_letters(ctx):
    await ctx.send(
        embed=messages.admin_instruction().embed,
        file=messages.admin_instruction().image,
        view=AdminMenuButtons()
    )


@admin_secret_letters.error
@start_secret_letters.error
async def permission_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send(embed=messages.no_permission_error().embed)


@tasks.loop(time=launch_time)
async def scheduled_send_letters():
    global current_date
    current_date = datetime.date.today()
    if current_date < sending_date:
        logging.info(f'–ñ–¥–µ–º. –î–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {(sending_date - current_date).days} –¥–Ω–µ–π')
        return
    elif current_date > sending_date:
        logging.info(f"–ò–≤–µ–Ω—Ç \"{event_settings['title']}\" –∑–∞–≤–µ—Ä—à–µ–Ω, —Å –º–æ–º–µ–Ω—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ —É–∂–µ "
                     f"{(current_date - sending_date).days} –¥–Ω–µ–π")
        return
    logging.info('–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–µ–Ω—å –Ω–∞—Å—Ç–∞–ª, –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞!')
    await send_letters()
